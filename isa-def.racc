
class ISADefParser

  prechigh
    nonassoc UMINUS
    left op_assg
    left op_bin
    left op_2_1
  preclow
  options no_result_var

rule
  isa_def : isa_stmt_list

  isa_stmt_list
    : isa_stmt_list isa_stmt
    | isa_stmt

  isa_stmt
    : isa_stmt_leading isa_block           { isa_hook(:end_isa_block, []) }

  isa_stmt_leading
    : INST_CLASS '(' id ',' bin_str ')'    { isa_hook(:start_isa_block, [ val[0], val[2], val[4] ]) }
    | INST '(' id ',' bin_str ')'          { isa_hook(:start_isa_block, [ val[0], val[2], val[4] ]) }
    | INST '(' id ')'                      { isa_hook(:start_isa_block, [ val[0], val[2] ]) }

  isa_block
    : '{' inst_block_list '}'

  inst_block_list
    : inst_block_list inst_block
    | inst_block
    | CLASS '(' id ')' ';'               { isa_hook(:set_class, [ val[2] ]) }

  inst_block
    : inst_block_leading c_stat_block    { isa_hook(:end_c_block, [ val[1] ]) }

  inst_block_leading
    : DECODE  '(' ')'                    { isa_hook(:start_c_block, [ val[0] ]) }
    | EXECUTE '(' ')'                    { isa_hook(:start_c_block, [ val[0] ]) }
    | DISASM  '(' ')'                    { isa_hook(:start_c_block, [ val[0] ]) }


# ------------------ Simple C Language Rules ------------------

  c_stat
    : c_stat_block
    | c_stat_single

  c_stat_block :
    : '{' c_stat_block '}'    { val.reduce(:+) }
    | '{' c_stat_list '}'     { val.reduce(:+) }
    | '{' '}'                 { val.reduce(:+) }

  c_stat_list
    : c_stat_list c_stat      { val.reduce(:+) }
    | c_stat_single

  c_stat_single
    : if_stat | for_stat | while_stat
    | type_list id ';'               { val[0] + ' ' + val[1] + ';' }
    | expr ';'                       { val.reduce(:+) }
    | ';'

  if_stat
    : IF '(' expr ')' c_stat                { val.reduce(:+) }
    | IF '(' expr ')' c_stat ELSE c_stat    { val.reduce(:+) }

  for_stat
    : FOR '(' expr ';' expr ';' expr ')' c_stat      { val.reduce(:+) }

  while_stat
    : WHILE '(' expr ')' c_stat             { val.reduce(:+) }
    | DO c_stat WHILE '(' expr ')' ';'      { val.reduce(:+) }


  expr_list
    : expr_list ',' expr         { val.reduce(:+) }
    | expr

  expr
    : assg_expr
    | expr op_bin expr           { val.reduce(:+) }
    | expr op_2_1 expr           { val.reduce(:+) }
    | expr '?' expr ':' expr     { val.reduce(:+) }
    | op_incr id                 { val.reduce(:+) }
    | id op_incr                 { val.reduce(:+) }
    | op_2_1 expr =UMINUS        { val.reduce(:+) }
    | id '[' expr ']'            { val.reduce(:+) }
    | func_call
    | '(' expr ')'               { val.reduce(:+) }
    | id | literal_const

  assg_expr
    : id op_assg expr                { val.reduce(:+) }
    | id '[' expr ']' op_assg expr   { val.reduce(:+) }
    | type_list id op_assg expr      { val.join(' ') }

  type_list
    : type_list type_const       { val.join(' ') }
    | type_list id               { val.join(' ') }
    | type_const | id

  func_call
    : id '(' expr_list ')'   { isa_hook(:call_func, [ val[0] ]); val.reduce(:+) }

#  id_list
#    : id_list ',' id       { val.reduce(:+) }
#    | id

  literal_const
    : literal_int
    | literal_float
    | literal_char
    | literal_string

end

---- header

---- inner

---- footer


