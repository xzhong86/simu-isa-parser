
class ISADefParser

  prechigh
    nonassoc UMINUS
    left op_assg
    left op_bin
#    left '*' '/'
#    left '+' '-'
  preclow
  options no_result_var

rule
  c_stat
    : c_stat_block
    | c_stat_single

  c_stat_block :
    : '{' c_stat_block '}'    { val.reduce(:+) }
    | '{' c_stat_list '}'     { val.reduce(:+) }

  c_stat_list
    : c_stat_list c_stat      { val.reduce(:+) }
    | c_stat_single

  c_stat_single
    : if_stat | for_stat | while_stat
    | expr ';'                       { val.reduce(:+) }
    | ';'

  if_stat
    : IF '(' expr ')' c_stat                { val.reduce(:+) }
    | IF '(' expr ')' c_stat ELSE c_stat    { val.reduce(:+) }

  for_stat
    : FOR '(' expr ';' expr ';' expr ')' c_stat      { val.reduce(:+) }

  while_stat
    : WHILE '(' expr ')' c_stat             { val.reduce(:+) }
    | DO c_stat WHILE '(' expr ')' ';'      { val.reduce(:+) }


  expr_list
    : expr_list ',' expr         { val.reduce(:+) }
    | expr

  expr
    : id
    | func_call
    | assg_expr
    | expr op_bin expr           { val.reduce(:+) }
    | expr '?' expr ':' expr     { val.reduce(:+) }
    | op_incr id                 { val.reduce(:+) }
    | id op_incr                 { val.reduce(:+) }
    | '(' expr ')'               { val.reduce(:+) }
    | literal_const

  assg_expr
    : id op_assg expr                { val.reduce(:+) }
    | id '[' expr ']' op_assg expr   { val.reduce(:+) }


  func_call
    : id '(' expr_list ')'   { p lineno; val.reduce(:+) }

#  id_list
#    : id_list ',' id       { val.reduce(:+) }
#    | id

  literal_const
    : literal_int
    | literal_float
    | literal_char
    | literal_string

end

---- header

---- inner

---- footer


